#!/bin/sh

configHome="${XDG_CONFIG_HOME}/dmenu_bw"
configFile="${configHome}/config.json"

if [ -e "$configFile" ]; then
    editCmd=$(jq -r ".editCmd" "$configFile")
    sepStr=$(jq -r ".sepStr" "$configFile")
    sessionKeyFile=$(jq -r ".sessionKeyFile" "$configFile")
fi

[ -z "$editCmd" ] || [ "$editCmd" = "null" ] &&
    editCmd="xterm -e $VISUAL"
[ -z "$sepStr" ] || [ "$sepStr" = "null" ] &&
    sepStr="="
[ "$sessionKeyFile" = "null" ] &&
    unset sessionKeyFile

bwStatus=$(bw status | jq -r '.status')
case "$bwStatus" in
    unlocked)   : ;;
    *)          case "$bwStatus" in
                    unauthenticated)    notify-send \
                                            "$(basename ${0##/*/})" \
                                            "Unauthenticated session. Acquiring new session key."
                                        email=$(yad \
                                            --title "Email" \
                                            --entry)
                                        password=$(yad \
                                            --title "Password" \
                                            --entry \
                                            --hide-text)
                                        sessionKey="$(bw login "$email" "$password" --raw)" ;;
                    locked)             notify-send \
                                            "$(basename ${0##/*/})" \
                                            "Session locked. Acquiring new session key."
                                        password=$(yad \
                                            --title "Password" \
                                            --entry \
                                            --hide-text)
                                        sessionKey="$(bw unlock "$password" --raw)" ;;
                    *)                  notify-send \
                                            "$(basename ${0##/*/})" \
                                            "Failed to unlock session."
                                        kill 0 ;;
                esac

                # output session key to file
                if [ -n "$sessionKeyFile" ]; then
                    printf 'export BW_SESSION="%s"' \
                        "$sessionKey" > "$sessionKeyFile"
                fi

                # confirm login
                export BW_SESSION=$sessionKey
                case $(bw status | jq -r '.status') in
                    unlocked)   : ;;
                    *)          notify-send \
                                    "$(basename ${0##/*/})" \
                                    "Failed to unlock session."
                                kill 0 ;;
                esac ;;
esac

sep () {
    i=0
    while [ $i -le 500 ]; do
        printf "%s" "$sepStr"
        i=$(( $i + 1 ))
    done
    printf "\n"
}

main_list () {
    echo "create"
    echo "sync"
    sep
    bw list items | jq -r '.[] | "\(.name) | \(.id)"'
}

item_list () {
    echo "copy"
    echo "edit"
    echo "delete"
}

create_list () {
    echo "card"
    echo "identity"
    echo "login"
    echo "secure note"
}

template () {
    # generate item template
    # $1: item type
    # return: item json
    item="$(bw get template item)"
    template="$(bw get template item."$1")"
    item="$(echo "$item" | jq -c ".$1 = $template")"
    item="$(echo "$item" | jq -c ".name = \"<++>\"")"
    item="$(echo "$item" | jq -c ".notes = null")"
    case "$1" in
        identity)   item="$(echo "$item" | jq -c '.type = 1')" ;;
        secureNote) item="$(echo "$item" | jq -c '.type = 2')" ;;
        card)   item="$(echo "$item" | jq -c '.type = 3')" ;;
        login)  item="$(echo "$item" | jq -c ".login.username = \"<++>\"")"
                # "fields": [ { "name": "Email", "value": "<++>", "type": 0 } ]
                password=$(tr -dc 'A-Za-z0-9!@#$%^&*()-=_+[]~{}|;:,./<>?' \
                    < /dev/urandom | head -c 16)
                item="$(echo "$item" | jq -c ".login.password = \"${password}\"")"
                uri="$(bw get template item.login.uri)"
                item="$(echo "$item" | jq -c ".login.uris = [${uri}]")"
                item="$(echo "$item" | jq -c ".login.uris[0].uri = null")"
                tmux set-buffer "$password" ;;
        "") kill 0 ;;
        *) kill 0 ;;
    esac
    echo "$item"
}

edit () {
    # edit a vault item
    # $1: item json
    # returns: edited item json

    # create secure temporary files for editing vault items
    safe="$(mktemp -d /tmp/bw.XXXXX)"
    chmod 700 "$safe"
    item="$(mktemp "${safe}/bw.XXXXX.json")"
    chmod 600 "$item"
    echo "$1" | jq > "$item"

    # open item with text editor
    $editCmd $item

    # never accept invalid json
    # Option A:
    # Force user to submit valid JSON before movin on.
    # while ! jq "." "$item" 1>/dev/null 2>&1; do
    #     notify-send \
    #         "$(basename ${0##/*/})" \
    #         "Cannot parse invalid JSON."
    #     eval "$editCmd $item"
    # done

    # Option B:
    # Kill the program forcing the user to start over,
    # giving the user the ability to quit if they want.
    if ! jq "." "$item" 1>/dev/null 2>&1; then
        notify-send \
            "$(basename ${0##/*/})" \
            "Cannot parse invalid JSON."
        kill 0
    fi

    # delete temporary files
    cat "$item" | jq -c
    rm -rf "$safe" 1>/dev/null 2>&1
}

create_item () {
    # create a vault item
    # $1: item json
    echo "$1" |
        bw encode |
        bw create item
}

edit_item () {
    # edit a vault item
    # $1: item json
    # $2: id
    echo "$1" |
        bw encode |
        bw edit item "$2"
}

chosen=$(main_list | ${DMENU_CMD:-dmenu}); [ -n "$chosen" ] || exit 1
case "$chosen" in
    create)     chosen=$(create_list | ${DMENU_CMD:-dmenu}); [ -n "$chosen" ] || exit 1
                case "$chosen" in
                    card)           create_item "$(edit "$(template card)")" ;;
                    identity)       create_item "$(edit "$(template identity)")" ;;
                    login)          create_item "$(edit "$(template login)")" ;;
                    "secure note")  create_item "$(edit "$(template securenote)")" ;;
                esac ;;
    sync)       if bw sync -f; then
                    notify-send \
                        "$(basename ${0##/*/})" \
                        "Sync successful."
                else
                    notify-send \
                        "$(basename ${0##/*/})" \
                        "Sync failed."
                fi ;;
    ${sepStr}*) exit 1 ;;
    *)          id=$(echo "$chosen" | cut -d '|' -f 2 | tr -d '[:space:]')
                item=$(bw list items | jq -c ".[] | select(.id == \"$id\")")
                chosen=$(item_list | ${DMENU_CMD:-dmenu}); [ -n "$chosen" ] || exit 1
                case "$chosen" in
                    copy)   username=$(echo "$item" | jq -r '.login.username')
                            password=$(echo "$item" | jq -r '.login.password')
                            echo "$username" | xclip -i -selection clipboard
                            echo "$password" | xclip -i -selection primary
                            tmux set-buffer "$username"
                            tmux set-buffer "$password" ;;
                    delete) bw delete item $id ;;
                    edit)   edit_item "$(edit "$item")" $id ;;
                esac ;;
esac
