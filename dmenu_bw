#!/bin/sh

configHome="${XDG_CONFIG_HOME}/dmenu_bw"
configFile="${configHome}/config.json"

if [ -e "$configFile" ]; then
    copyCmds=$(jq -r ".copyCmds" "$configFile")
    dmenuOpts=$(jq -r ".dmenuOpts" "$configFile")
    editCmd=$(jq -r ".editCmd" "$configFile")
    sessionKeyFile=$(jq -r ".sessionKeyFile" "$configFile"); fi

if [ -z "$copyCmds" ] || [ "$copyCmds" = "null" ]; then
    copyCmds='
    {
        "login": {
            ".login.username": [
                "echo \"$value\" | xclip -i -selection clipboard"
            ],
            ".login.password": [
                "echo \"$value\" | xclip -i -selection primary"
            ]
        },
        "securenote": {},
        "card": {},
        "identity": {}
    }'; fi
if [ -z "$dmenuOpts" ] || [ "$dmenuOpts" = "null" ]; then
    dmenuOpts="-i -l 10"; fi
if [ -z "$editCmd" ] || [ "$editCmd" = "null" ]; then
    editCmd="xterm -e nano"; fi
if [ "$sessionKeyFile" = "null" ]; then
    unset sessionKeyFile; fi

bwStatus=$(bw status | jq -r '.status')
case "$bwStatus" in
    unlocked)   : ;;
    *)  case "$bwStatus" in
            unauthenticated)
                notify-send \
                    "$(basename ${0##/*/})" \
                    "Unauthenticated session. Acquiring new session key."
                email=$(yad \
                    --title "Email" \
                    --entry)
                password=$(yad \
                    --title "Password" \
                    --entry \
                    --hide-text)
                sessionKey="$(bw login "$email" "$password" --raw)" ;;
            locked)
                notify-send \
                    "$(basename ${0##/*/})" \
                    "Session locked. Acquiring new session key."
                password=$(yad \
                    --title "Password" \
                    --entry \
                    --hide-text)
                sessionKey="$(bw unlock "$password" --raw)" ;;
            *)  notify-send \
                    "$(basename ${0##/*/})" \
                    "Failed to unlock session."
                kill 0 ;;
        esac

        # output session key to file
        if [ -n "$sessionKeyFile" ]; then
            printf 'export BW_SESSION="%s"' \
                "$sessionKey" > "$sessionKeyFile"
        fi

        # confirm login
        export BW_SESSION=$sessionKey
        case $(bw status | jq -r '.status') in
            unlocked) : ;;
            *)  notify-send \
                    "$(basename ${0##/*/})" \
                    "Failed to unlock session."
                kill 0 ;;
        esac ;;
esac

sepStr="="
sep () {
    i=0
    while [ $i -le 500 ]; do
        printf "%s" "$sepStr"
        i=$(( $i + 1 ))
    done
    printf "\n"
}

main_list () {
    echo "create"
    echo "logout"
    echo "sync"
    sep
    bw list items | jq -r '.[] | "\(.name) | \(.id)"'
    sep
    echo "run Bitwarden Electron"
}

item_list () {
    echo "copy"
    echo "edit"
    echo "delete"
}

create_list () {
    echo "login"
    echo "secure note"
    echo "card"
    echo "identity"
}

edit () {
    # edit a vault item
    # $1: item json
    # returns: edited item json

    # create secure temporary files for editing vault items
    safe="$(mktemp -d /tmp/bw.XXXXX)"
    chmod 700 "$safe"
    item="$(mktemp "${safe}/bw.XXXXX.json")"
    chmod 600 "$item"
    echo "$1" | jq > "$item"

    # open item with text editor
    $editCmd $item

    # do not accept invalid JSON
    if ! jq "." "$item" 1>/dev/null 2>&1; then
        notify-send \
            "$(basename ${0##/*/})" \
            "Cannot parse invalid JSON."
        kill 0
    fi

    # delete temporary files
    cat "$item" | jq -c
    rm -rf "$safe" 1>/dev/null 2>&1
}

create () {
    # create a vault item
    # $1: item type

    item="$(bw get template item)"
    template="$(bw get template item.${1})"
    item="$(echo "$item" | jq -c ".${1} = ${template}")"

    formSep="$(tr -dc '[:digit:]' < /dev/urandom | head -c 5)"
    case "$1" in
        login) #^
            uri="$(bw get template item.login.uri)"
            item="$(echo "$item" | jq -c ".login.uris = [${uri}]")"

            form="$(yad --form \
                --field=$"Name" "" \
                --field=$"Username" "" \
                --field=$"Password":H "" \
                --field=$"URI" "" \
                --field=$"Folder" "" \
                --field=$"Favorite":CHK "false" \
                --field=$"Notes":TXT "" \
                --separator="$formSep" || kill 0)"

            name="$(echo "$form" | awk -F "$formSep" '{print $1}')"
            [ "$name" = "" ] &&
                item="$(echo "$item" | jq -c ".name = null")" ||
                item="$(echo "$item" | jq -c ".name = \"$name\"")"

            username="$(echo "$form" | awk -F "$formSep" '{print $2}')"
            [ "$username" = "" ] &&
                item="$(echo "$item" | jq -c ".login.username = null")" ||
                item="$(echo "$item" | jq -c ".login.username = \"$username\"")"

            password="$(echo "$form" | awk -F "$formSep" '{print $3}')"
            [ "$password" = "" ] &&
                item="$(echo "$item" | jq -c ".login.password = null")" ||
                item="$(echo "$item" | jq -c ".login.password = \"$password\"")"

            uri="$(echo "$form" | awk -F "$formSep" '{print $4}')"
            [ "$uri" = "" ] &&
                item="$(echo "$item" | jq -c ".login.uris[0].uri = null")" ||
                item="$(echo "$item" | jq -c ".login.uris[0].uri = \"$uri\"")"

            folderId="$(echo "$form" | awk -F "$formSep" '{print $5}')"
            [ "$folderId" = "" ] &&
                item="$(echo "$item" | jq -c ".folderId = null")" ||
                item="$(echo "$item" | jq -c ".folderId = \"$folderId\"")"

            favorite="$(echo "$form" | awk -F "$formSep" '{print $6}')"
            [ "$favorite" = "TRUE" ] &&
                item="$(echo "$item" | jq -c ".favorite = true")" ||
                item="$(echo "$item" | jq -c ".favorite = false")"

            notes="$(echo "$form" | awk -F "$formSep" '{print $7}')"
            [ "$notes" = "" ] &&
                item="$(echo "$item" | jq -c ".notes = null")" ||
                item="$(echo "$item" | jq -c ".notes = \"$notes\"")"
            ;; #$

        securenote)
            item="$(echo "$item" | jq -c '.type = 2')"

            form="$(yad --form \
                --field=$"Name" "" \
                --field=$"Folder" "" \
                --field=$"Favorite":CHK "false" \
                --field=$"Notes":TXT "" \
                --separator="$formSep" || kill 0)"

            kill 0

            ;;

        card)
            item="$(echo "$item" | jq -c '.type = 3')"

            form="$(yad --form \
                --field=$"Name" "" \
                --field=$"Cardholder Name" "" \
                --field=$"Number":H "" \
                --field=$"Brand":CBE "Visa!Mastercard!American Express" \
                --field=$"Expiration Date":DT \
                --field=$"Security Code":H "" \
                --field=$"Folder" "" \
                --field=$"Favorite":CHK "false" \
                --field=$"Notes":TXT "" \
                --separator="$formSep" || kill 0)"

            kill 0

            ;;

        identity)
            item="$(echo "$item" | jq -c '.type = 4')"

            form="$(yad --form \
                --field=$"Name" "" \
                --field=$"Title":CB "Mr!Mrs!Ms!Dr" \
                --field=$"First Name" "" \
                --field=$"Middle Name" "" \
                --field=$"Last Name" "" \
                --field=$"Username" "" \
                --field=$"Company" "" \
                --field=$"Social Security Number" "" \
                --field=$"Passport Number" "" \
                --field=$"License Number" "" \
                --field=$"Email" "" \
                --field=$"Address 1" "" \
                --field=$"Address 2" "" \
                --field=$"Address 3" "" \
                --field=$"City/Town" "" \
                --field=$"State/Province" "" \
                --field=$"Zip/Postal Code" "" \
                --field=$"Country" "" \
                --field=$"Favorite":CHK "false" \
                --field=$"Folder" "" \
                --field=$"Notes":TXT "" \
                --separator="$formSep" || kill 0)"

            kill 0

            ;;

        *) kill 0 ;;

    esac

    echo "$item"

    # echo "$item" |
    #     bw encode |
    #     bw create item

}

edit_item () {
    # edit a vault item
    # $1: item json
    # $2: id
    echo "$1" |
        bw encode |
        bw edit item "$2"
}

chosen=$(main_list | dmenu ${dmenuOpts}); [ -n "$chosen" ] || exit 1
case "$chosen" in
    create)     chosen=$(create_list | dmenu ${dmenuOpts}); [ -n "$chosen" ] || exit 1
                case "$chosen" in
                    login)          create login ;;
                    "secure note")  create securenote ;;
                    card)           create card ;;
                    identity)       create identity ;;
                esac ;;
    logout)     if bw logout; then
                    notify-send \
                        "$(basename ${0##/*/})" \
                        "Logout successful."
                else
                    notify-send \
                        "$(basename ${0##/*/})" \
                        "Logout failed."
                fi ;;
    sync)       if bw sync -f; then
                    notify-send \
                        "$(basename ${0##/*/})" \
                        "Sync successful."
                else
                    notify-send \
                        "$(basename ${0##/*/})" \
                        "Sync failed."
                fi ;;
    "run Bitwarden Electron") bitwarden ;;
    ${sepStr}*) exit 1 ;;
    *)          id=$(echo "$chosen" | cut -d '|' -f 2 | tr -d '[:space:]')
                item=$(bw list items | jq -c ".[] | select(.id == \"$id\")")
                itemType=$(echo "$item" | jq -r ".type")
                case "$itemType" in
                    1) itemType="login" ;;
                    2) itemType="securenote" ;;
                    3) itemType="card" ;;
                    4) itemType="identity" ;;
                esac
                chosen=$(item_list | dmenu ${dmenuOpts}); [ -n "$chosen" ] || exit 1
                case "$chosen" in
                    copy)   keys=$(echo "$copyCmds" | jq -r ".${itemType} | keys[]")
                            for key in $keys; do
                                value=$(echo "$item" | jq -r "${key}")
                                cmds=$(echo "$copyCmds" | jq -r ".${itemType}[\"${key}\"][]")
                                for cmd in "$cmds"; do
                                    eval "$cmd"
                                done
                            done ;;
                    delete) bw delete item $id ;;
                    edit)   edit_item "$(edit "$item")" $id ;;
                esac ;;
esac

# vim: fdm=marker fmr=#^,#$
