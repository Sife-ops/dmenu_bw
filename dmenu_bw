#!/bin/sh

configHome="${XDG_CONFIG_HOME:-${HOME}/.config}/dmenu_bw" #^
configFile="${configHome}/config.json"
self=$(basename "${0##/*/}")

if [ -e "$configFile" ]; then
    copyCmds="$(jq -r ".copyCmds" "$configFile")"
    dmenuOpts="$(jq -r ".dmenuOpts" "$configFile")"
    editCmd="$(jq -r ".editCmd" "$configFile")"
    passwordGenCmd="$(jq -r ".passwordGenCmd" "$configFile")"
    sessionKeyFile="$(jq -r ".sessionKeyFile" "$configFile")"; fi

if [ -z "$copyCmds" ] || [ "$copyCmds" = "null" ]; then
    copyCmds='
    {
        "login": {
            ".login.username": [
                "echo \"$value\" | xclip -i -selection clipboard"
            ],
            ".login.password": [
                "echo \"$value\" | xclip -i -selection primary"
            ]
        },
        "secureNote": {},
        "card": {},
        "identity": {}
    }'; fi
if [ -z "$dmenuOpts" ] || [ "$dmenuOpts" = "null" ]; then
    dmenuOpts="-i -l 10"; fi
if [ -z "$editCmd" ] || [ "$editCmd" = "null" ]; then
    editCmd="xterm -e nano"; fi
[ "$passwordGenCmd" = "null" ] &&
    unset passwordGenCmd
[ "$sessionKeyFile" = "null" ] &&
    unset sessionKeyFile #$

bwStatus=$(bw status | jq -r '.status') #^
case "$bwStatus" in
    unlocked)   : ;;
    *)  case "$bwStatus" in
            unauthenticated)
                notify-send "$self" "Unauthenticated session. Acquiring new session key."
                email=$(yad \
                    --title "Email" \
                    --entry)
                password=$(yad \
                    --title "Password" \
                    --entry \
                    --hide-text)
                sessionKey="$(bw login "$email" "$password" --raw)" ;;
            locked)
                notify-send "$self" "Session locked. Acquiring new session key."
                password=$(yad \
                    --title "Password" \
                    --entry \
                    --hide-text)
                sessionKey="$(bw unlock "$password" --raw)" ;;
            *)  notify-send "$self" "Failed to unlock session."
                exit 1 ;;
        esac

        # output session key to file
        if [ -n "$sessionKeyFile" ]; then
            printf 'export BW_SESSION="%s"' \
                "$sessionKey" > "$sessionKeyFile"
        fi

        # confirm login
        export BW_SESSION=$sessionKey
        case $(bw status | jq -r '.status') in
            unlocked) : ;;
            *)  notify-send "$self" "Failed to unlock session."
                exit 1 ;;
        esac ;;
esac #$

sepStr="=" #^
sep () {
    i=0
    while [ $i -le 500 ]; do
        printf "%s" "$sepStr"
        i=$(( i + 1 ))
    done
    printf "\n"
}

main_list () {
    echo "create"
    echo "logout"
    echo "sync"
    sep
    bw list items | jq -r '.[] | "\(.name) | \(.id)"'
    sep
    echo "run Bitwarden Electron"
}

item_list () {
    echo "copy"
    echo "edit"
    echo "delete"
}

create_list () {
    echo "login"
    echo "secure note"
    echo "card"
    echo "identity"
} #$

form () { #^
    i=0
    for prop in $(printf "%b" "$1"); do
        i=$(( i + 1 ))
        fieldVal="$(echo "$form" | awk -F "$formSep" "{print \$${i}}")"
        case "$fieldVal" in
            "")     newItem="$(echo "$newItem" | jq -c "${prop} = null")" ;;
            TRUE)   newItem="$(echo "$newItem" | jq -c "${prop} = true")" ;;
            FALSE)  newItem="$(echo "$newItem" | jq -c "${prop} = false")" ;;
            *)      newItem="$(echo "$newItem" | jq -c "${prop} = \"$fieldVal\"")" ;;
        esac
    done
} #$

create () { #^
    # create a vault item
    # $1: item type

    newItem="$(bw get template item)"
    template="$(bw get template item."${1}")" # securenote vs. secureNote
    newItem="$(echo "$newItem" | jq -c ".${1} = ${template}")"

    formSep="$(tr -dc '[:digit:]' < /dev/urandom | head -c 5)"
    case "$1" in

        login) #^
            uri="$(bw get template item.login.uri)"
            newItem="$(echo "$newItem" | jq -c ".login.uris = [${uri}]")"

            [ -n "$passwordGenCmd" ] &&
                password=$(eval "$passwordGenCmd")

            form="$(yad --form \
                --field=$"Name" "" \
                --field=$"Username" "" \
                --field=$"Password":H "${password:-""}" \
                --field=$"URI" "" \
                --field=$"Folder" "" \
                --field=$"Favorite":CHK "false" \
                --field=$"Notes":TXT "" \
                --separator="$formSep" || kill 0)"

            form ".name\n.login.username\n.login.password\n.login.uris[0].uri\n.folderId\n.favorite\n.notes"
            ;; #$

        secureNote) #^
            newItem="$(echo "$newItem" | jq -c '.type = 2')"

            form="$(yad --form \
                --field=$"Name" "" \
                --field=$"Folder" "" \
                --field=$"Favorite":CHK "false" \
                --field=$"Notes":TXT "" \
                --separator="$formSep" || kill 0)"

            form ".name\n.folderId\n.favorite\n.notes"
            ;; #$

        card) #^
            newItem="$(echo "$newItem" | jq -c '.type = 3')"

            form="$(yad --form \
                --field=$"Name" "" \
                --field=$"Cardholder Name" "" \
                --field=$"Number":H "" \
                --field=$"Brand":CBE "Visa!Mastercard!American Express!Discover!Diners Club!JCB!Maestro!UnionPay" \
                --field=$"Expiration Month":NUM "!1..12" \
                --field=$"Expiration Year":NUM "!1900..9999" \
                --field=$"Security Code":NUM "!100..999" \
                --field=$"Folder" "" \
                --field=$"Favorite":CHK "false" \
                --field=$"Notes":TXT "" \
                --separator="$formSep" || kill 0)"

            form ".name\n.card.cardholderName\n.card.number\n.card.brand\n.card.expMonth\n.card.expYear\n.card.code\n.folderId\n.favorite\n.notes"
            ;; #$

        identity) #^
            newItem="$(echo "$newItem" | jq -c '.type = 4')"

            form="$(yad --form \
                --field=$"Name" "" \
                --field=$"Title":CB "Mr!Mrs!Ms!Dr" \
                --field=$"First Name" "" \
                --field=$"Middle Name" "" \
                --field=$"Last Name" "" \
                --field=$"Username" "" \
                --field=$"Company" "" \
                --field=$"Social Security Number" "" \
                --field=$"Passport Number" "" \
                --field=$"License Number" "" \
                --field=$"Email" "" \
                --field=$"Address 1" "" \
                --field=$"Address 2" "" \
                --field=$"Address 3" "" \
                --field=$"City/Town" "" \
                --field=$"State/Province" "" \
                --field=$"Zip/Postal Code" "" \
                --field=$"Country" "" \
                --field=$"Favorite":CHK "false" \
                --field=$"Folder" "" \
                --field=$"Notes":TXT "" \
                --separator="$formSep" || kill 0)"

            form ".name\n.identity.title\n.identity.firstName\n.identity.middleName\n.identity.lastName\n.identity.username\n.identity.company\n.identity.ssn\n.identity.passportNumber\n.identity.licenseNumber\n.identity.email\n.identity.address1\n.identity.address2\n.identity.address3\n.identity.city\n.identity.state\n.identity.postalCode\n.identity.country\n.favorite\n.folder\n.notes"
            ;; #$

        *) kill 0 ;;
    esac

    echo "$newItem" |
        bw encode |
        bw create item &&
            notify-send "$self" "Creation successful." ||
            notify-send "$self" "Creation failed."
} #$

edit () { #^
    # edit a vault item
    # $1: item json
    # $2: item id

    # create secure temporary files for editing vault items
    tmpDir="$(mktemp -d /tmp/dmenu_bw.XXXXX)"
    chmod 700 "$tmpDir"
    newItem="$(mktemp "${tmpDir}/dmenu_bw.XXXXX.json")"
    chmod 600 "$newItem"
    echo "$1" | jq > "$newItem"

    # open item with editor command
    $editCmd "$newItem"

    # do not accept invalid JSON
    if ! jq "." "$newItem" 1>/dev/null 2>&1; then
        notify-send "$self" "Cannot parse invalid JSON."
        kill 0
    fi

    bw encode < "$newItem" | bw edit item "$2" &&
        notify-send "$self" "Edit successful." ||
        notify-send "$self" "Edit failed."

    # delete temporary files
    rm -rf "$tmpDir" 1>/dev/null 2>&1
} #$

chosen=$(main_list | dmenu ${dmenuOpts}); [ -n "$chosen" ] || exit 1
case "$chosen" in
    create)     chosen=$(create_list | dmenu ${dmenuOpts}); [ -n "$chosen" ] || exit 1
                case "$chosen" in
                    login)          create login ;;
                    "secure note")  create secureNote ;;
                    card)           create card ;;
                    identity)       create identity ;;
                esac ;;
    logout)     bw logout &&
                    notify-send "$self" "Logout successful." ||
                    notify-send "$self" "Logout failed." ;;
    sync)       bw sync -f &&
                    notify-send "$self" "Sync successful." ||
                    notify-send "$self" "Sync failed." ;;
    "run Bitwarden Electron") bitwarden ;;
    ${sepStr}*) exit 1 ;;
    *)          name=$(echo "$chosen" | cut -d '|' -f 1 | tr -d '[:space:]') # use awk
                id=$(echo "$chosen" | cut -d '|' -f 2 | tr -d '[:space:]')
                item=$(bw list items | jq -c ".[] | select(.id == \"$id\")")
                itemType=$(echo "$item" | jq -r ".type")
                case "$itemType" in
                    1) itemType=".login" ;;
                    2) itemType=".secureNote" ;;
                    3) itemType=".card" ;;
                    4) itemType=".identity" ;;
                esac
                chosen=$(item_list | dmenu ${dmenuOpts}); [ -n "$chosen" ] || exit 1
                case "$chosen" in
                    copy)   keys=$(echo "$copyCmds" | jq -r "${itemType} | keys[]")
                            unset fail
                            for key in $keys; do
                                value=$(echo "$item" | jq -r "${key}")
                                cmds=$(echo "$copyCmds" | jq -r "${itemType}[\"${key}\"][]")
                                for cmd in "$cmds"; do
                                    if ! eval "$cmd"; then
                                        notify-send "$self" "Copy command failed: \"$cmd\""
                                        fail=t; fi
                                done
                            done
                            [ -z "$fail" ] &&
                                notify-send "$self" "$name copied successfully." ;;
                    delete) bw delete item "$id" &&
                                notify-send "$self" "Deletion successful." ||
                                notify-send "$self" "Deletion failed." ;;
                    edit)   edit "$item" "$id" ;;
                esac ;;
esac

# vim: fdm=marker fmr=#^,#$
